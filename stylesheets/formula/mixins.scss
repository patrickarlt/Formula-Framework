@mixin show {
  display: block !important;
  visibility: visible;  
}

@mixin clearfix {
  &:before,
  &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
}

@mixin hide {
  display: none !important;
  visibility: hidden;
}

@mixin visually-hidden { 
  border: 0; clip: 
  rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
  &.focusable:active, &.focusable:focus  {
    clip: auto;
    height: auto;
    margin: 0;
    overflow: visible;
    position: static;
    width: auto;
  } 
}

@mixin invisible {
  visibility: hidden;
}

@mixin header-extentions($size, $lines){
  &.divider {
    @include apply-side-rhythm-border(bottom, 1px, 0, $size);
  }
  &.leader {
    @include leader($lines, $size);
  }
  &.trailer {
    @include trailer($lines, $size);
  }
}

/* Helper for responsive design */
/* From : https://gist.github.com/2361408 */
@mixin respond-to($type, $m: max-width) {
  @if $type == handheld {
    @media screen and (max-width: 767px) {
      @content;
    }
  } @else if $type == webkit {
    @media screen and (-webkit-min-device-pixel-ratio: 0) {
      @content;
    }
  } @else if $type == nonhandheld {
    @media screen and (min-width: 769px) {
      @content;
    }
  } @else {
    @media screen and ($m: $type) {
      @content;
    }
  }
}

/* Helper for retina displays */
/* From : https://gist.github.com/2361408 */
@mixin retina-display() {
  @media screen and (-webkit-min-device-pixel-ratio : 1.5), screen and (min-device-pixel-ratio : 1.5) {
    @content;
  }
}

@function num-to-word($num) {
  $count:1;
  @each $word in one,
                 two,
                 three,
                 four,
                 five,
                 six,
                 seven,
                 eight,
                 nine,
                 ten,
                 eleven,
                 twelve,
                 thirteen,
                 fourteen,
                 fifteen,
                 sixteen,
                 seventeen,
                 eighteen,
                 nineteen,
                 twenty,
                 twentyone,
                 twentytwo,
                 twentythree,
                 twentyfour{
    @if ($count == $num) { @return $word; }
    $count: $count + 1;
  }
  @warn "Could not convert #{$num} to a word. Useage `num-to-word(8);`";
  @return "invalid";
}

@mixin button-style($background, $borderColor, $textColor, $textShadow){
  @include background($background);  
  border-color: $borderColor;
  color: $textColor;
  text-shadow: $textShadow;
}

@mixin box-style($background, $borderColor, $textColor, $textShadow) {
  @include button-style($background, $borderColor, $textColor, $textShadow);
}

@mixin image-replace($url, $width, $height, $background-color:transparent){
	display:block;
	width: $width;
	height: $height;
  text-indent:-9999em;
	background: $background-color url($url) no-repeat 0 0;
	overflow:hidden;
}

@mixin size($width, $height){
	width: $width;
	height: $height;
}

@mixin square($size){
	@include size($size, $size);
}

@mixin position($type, $top:auto, $left:auto, $bottom:auto, $right:auto){
	position: $type;
	top: $top;
	left: $left;
	bottom: $bottom;
	right: $right;
}

@mixin arrow-base($size: 6px){
  @include square(0);
  content: "";
  display: block;
  border-width: $size;
  border-style: solid;
}

@mixin arrow-color($color: $black){
  border-color: $color;
}

@mixin arrow-direction($direction: "down") {
  @if $direction == "up" {
    border-left-color: transparent !important;
    border-right-color: transparent !important;
    border-top: none;
  }
  @if $direction == "down" {   
    border-bottom: none;
    border-left-color: transparent !important;
    border-right-color: transparent !important;
  }
  @if $direction == "left" {
    border-right:none;
    border-top-color: transparent !important;
    border-bottom-color: transparent !important;
  }
  @if $direction == "right" {
    border-left: none;
    border-top-color: transparent !important;
    border-bottom-color: transparent !important;
  }
}

@mixin arrow-position($size:6px, $position: false) {  
  position: absolute;
  @if $position == "above" {
    left: 50%;
    top: -($size);
    margin-left: -($size);
  }
  @if $position == "left" {   
    left: -($size);
    top: 50%;
    margin-top:-($size);
  }
  @if $position == "below" {
    bottom: -($size);
    left: 50%;
    margin-left:-($size);
  }
  @if $position == "right" {
    right: -($size);
    top: 50%;
    margin-top:-($size);
  }
}

// Add arrows to an element
@mixin arrow($direction: "down", $size: 6px, $color: red, $position: false){
  &:after {
    @include arrow-base($size);
    @include arrow-color($color);
    @include arrow-direction($direction);
    @include arrow-position($position);
  }
}

@function grid-calc($span) {
  @return percentage(($span / $total-columns));
}

// Mixin for base column styles
@mixin column-style() {
  @include box-sizing(border-box);
  float: left;
  padding: 0 $column-gutter/2;
}

// Mixin to calculate column width
@mixin column-width($span) {
  width: grid-calc($span);
}

// Mixin to create a column
@mixin column($span) {
  @include column-style();
  @include column-width($span);
}

// Mixin for the last column in a row
@mixin last-column() {
  float: right;
}

// add space before a column
@mixin pre($amount) {
  margin-left: grid-calc($amount);
}

// add space after a column
@mixin post($amount) {
  margin-right: grid-calc($amount);
}

// Contrainer setup
@mixin container {
  @include box-sizing(border-box);
  margin: 0 auto;
  max-width: $container-max;
  padding: 0 $container-gutter;
  width: $container-width;
}

@mixin center-column {
  float: none;
  margin: 0 auto;
};

/*
<!DOCTYPE html>
<!--[if IE 8]>  <html class="no-js ie ie8"> <![endif]-->
<!--[if IE 9]>  <html class="no-js ie ie9"> <![endif]-->
<!--[if !IE]>   <html class="no-js"> <!--<![endif]-->
*/

// IE mixins
@mixin for-ie9(){
  html.ie9 {
    @content;
  }
}

@mixin for-ie8(){
  html.ie8 {
    @content; 
  }
}

@mixin for-ie(){
  html.ie {
    @content;
  }
}